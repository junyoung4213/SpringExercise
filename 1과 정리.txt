<AOP : Aspect Oriented Programming>

OOP를 Support 해주는 개념.

핵심관심모듈 : 계좌이체 입출금 이자계산  // biz 로직
횡단관심모듈 : 보안 로깅	// 기능적

AOP가 핵심관심모듈의 코드를 직접 건드리지 않고 필요한 기능이
동작하도록 하는 데는 위빙(Weaving)이라고 하는 특수한 작업이 필요하다.

즉, AOP에서 위빙 작업을 통해 핵심모듈 사이 사이에 필요한
횡단 관심 코드가 동작하도록 엮어지게 만든다.

<디자인패턴>
프로그램 개발에서 자주 나타나는 과제를 해결하기 위한 방법 중 하나로,
소프트웨어 개발과정에서 발견된 Know-How를 축적하여 이름을 붙여
이후에 재사용하기 좋은 형태로 특정 규약을 묶어서 정리한 것.

이 용어를 소프트웨어 개발 영역에서 구체적으로 처음 제시한 곳은
GoF(Gang of Four)라 불리는 네 명의 컴퓨터 과학 연구자들이 쓴 서적
'Design Patterns: Elements of Reusable Object-Oriented Software'
(재사용 가능한 객체지향 소프트웨어의 요소 - 디자인 패턴) 이다.
총 23가지 Design pattern이 있다.

디자인 패턴을 사용하는 이유?
1. 요구사항 변경에 대한 Source Code 변경을 최소화
2. 범용적인 코딩 스타일을 적용
3. 상황에 따라 인수 인계하는 경우 -> 직관적인 코드를 사용.

<프레임워크>
비기능적(Non-Funtional) 요구사항(성능,보안,확장성,안정성등)을 만족하는 구조와
구현된 기능을 안정적으로 실행하도록 제어해주는 잘 만들어진 구조의 라이브러리의 덩어리.

프레임워크는 애플리케이션들의 최소한의 공통점을 찾아 하부 구조를 제공함으로써
개발자들로 하여금 시스템의 하부 구조를 구현하는데 들어가는 노력을 절감하게 해줌.

<프레임워크를 사용하는 이유?>
1. 비기능적인 요소들을 초기 개발 단계마다 구현해야 하는 불합리함을 극복해준다.
2. 기능적인(Functional) 요구사항에 집중할 수 있도록 해준다.
3. 디자인 패턴과 마찬가지로 반복적으로 발견되는 문제를 해결하기 위한
특화된 Solution을 제공한다.

<디자인 패턴과 프레임워크의 관련성>
디자인 패턴은 프레임워크의 핵심적인 특징이고, 프레임워크를 사용하는
애플리케이션에 그 패턴이 적용된다는 특징을 가지고 있다. 
하지만 프레임워크는 디자인 패턴이 아니다.

디자인 패턴은 애플리케이션을 설계할 때 필요한 구조적인 가이드라인이
되어 줄 수는 있지만 구체적으로 구현된 기반코드를 제공하지는 않는다.

프레임워크는 디자인 패턴과 함께 패턴이 적용 된 기반 클래스 라이브러리를 제공해서
프레임워크를 사용하는 구조적인 틀과 구현코드를 함께 제공한다.

<디자인패턴과 프레임워크의 관련성>
개발자는 프레임워크의 기반코드를 확장하여 사용하면서
자연스럽게 그 프레임워크에서 사용된 패턴을 적용할 수 있게 된다.

<IoC(Inversion of Control)>

IoC란? "제어의 역전" 즉, 인스턴스 생성부터 소멸까지의 인스턴스
생명주기 관리를 개발자가 아닌 컨테이너가 대신 해준다는 뜻이다.
즉, 컨테이너 역할을 해주는 프레임워크에게 제어하는 권한을 넘겨서
개발자의 코드가 신경 써야 할 것을 줄이는 전략이다.

<프레임워크와 라이브러리의 차이점?>
간단하게 설명하자면, 
라이브러리는 주도권이 개발자에게 있다.
프레임워크는 주도권이 프레임워크에게 있다.
그래서 제어가 역전됬다고 표현한다.

<디자인 패턴 + 라이브러리 = 프레임워크!>

프레임워크는 디자인 패턴과 그것이 적용된 기반 라이브러리의
결합으로 이해할 수 있다.

프레임워크의 라이브러리를 살펴볼 때도 적용된 패턴을 주목해서
살펴 본다면 그 구성을 이해하기 쉽다.

특히 프레임워크를 확장하거나 커스터마이징 할 때는 프레임워크에
적용된 패턴에 대한 이해가 꼭 필요하다.